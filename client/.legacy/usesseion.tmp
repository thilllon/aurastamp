// Synthesizing 10/10 solutions

=======


export const useSession = (props: UseSessionProps = {}) => {
  const { required = false, redirectTo = '/login', queryConfig } = props;
  const router = useRouter();
  const { data, error, isLoading, isError, refetch } = useQuery(
    ['session', {}],
    fetchSession,
    {
      enabled: false,
      ...queryConfig,
    }
  );

  if (required && !data) {
    router.push(redirectTo);
  }

  return {
    data: data || null,
    error: error || null,
    isLoading: isLoading || false,
    isError: isError || false,
    refetch: refetch || null,
  };
};

=======


export const useSession = (props: UseSessionProps = {}) => {
  const { required = false, redirectTo = '/login', queryConfig } = props;
  const router = useRouter();

  const { data: session, error, isFetching, isSuccess } = useQuery<Session | null, unknown, unknown>(
    'session',
    fetchSession,
    queryConfig,
  );

  if (required && !session && !isFetching && !isSuccess) {
    router.push(redirectTo, redirectTo, { shallow: true });
  }

  return { session, error, isFetching, isSuccess };
};

=======


export const useSession = ({
  required = false,
  redirectTo = '/login',
  queryConfig = {},
} : UseSessionProps = {}): Session | null => {
  const router = useRouter();
  const query = useQuery<Session | null, unknown, unknown>('session', fetchSession, queryConfig);
  const session = query.data;

  if (required && !session) {
    router.push(redirectTo);
  }

  return session;
};

=======


export const useSession = ({ required = false, redirectTo = '/login', queryConfig }: UseSessionProps = {}) => {
  const router = useRouter();
  const { data, error, isFetching, isSuccess, isError, refetch } = useQuery<Session | null, unknown>(
    'session',
    fetchSession,
    queryConfig,
  );

  if (required && !data) {
    if (redirectTo && !isFetching) {
      router.push(redirectTo);
    }
    return {};
  }

  return {
    data,
    error,
    isFetching,
    isSuccess,
    isError,
    refetch,
  };
};

/**
 * React Query wrapper to retrieve `Session`.
 * Replaces `useSession` and `Provider` from `next-auth/client` in codebases
 * where you already use `react-query`.
 *
 * [`useSession`](https://next-auth.js.org/getting-started/client#usesession) |
 * [`Provider`](https://next-auth.js.org/getting-started/client#provider) |
 * [React Query](https://react-query.tanstack.com/guides/ssr#using-nextjs)
 */
type UseSessionProviderProps = {
  session?: Session | null;
  children: React.ReactElement;
};

export const UseSessionProvider = ({ session, children }: UseSessionProviderProps) => {
  const { data: sessionData, error: sessionError, isFetching: sessionIsFetching } = useSession({
    required: true,
    queryConfig: {
      initialData: session,
    },
  });

  return (
    <QueryClient>
      {({ cache }) => {
        if (sessionData) {
          cache.setQueryData('session', sessionData);
        }
        if (sessionError) {
          cache.setQueryError('session', sessionError);
        }
        if (sessionIsFetching) {
          cache.setQueryStatus('

=======


export function useSession({ required = false, redirectTo = '/login', queryConfig }: UseSessionProps = {}) {
  const router = useRouter();
  const session = useQuery('session', fetchSession, queryConfig);
  if (!session.data) {
    if (required) {
      router.push(redirectTo);
    }
    return null;
  }
  return session.data;
}

=======


const useSession = ({ required = false, redirectTo = '/login', queryConfig }: UseSessionProps = {}) => {
  const router = useRouter();
  const { data: session } = useQuery<Session | null, unknown>('session', fetchSession, queryConfig);

  if (required && !session) {
    router.push(redirectTo);
  }

  return session;
};

export default useSession;

=======


export const useSession = ({ required = false, redirectTo, queryConfig }: UseSessionProps = {}): Session | null => {
  const router = useRouter();
  const { data, error, isLoading, isError } = useQuery(
    'session',
    fetchSession,
    {
      ...queryConfig,
      enabled: true,
      refetchOnWindowFocus: false,
      refetchOnMount: false,
      refetchInterval: 0,
      retry: false,
    },
  );

  if (required && isError && !redirectTo) {
    throw new Error('`required` option was set, but no `redirectTo` was provided');
  }

  if (isError && redirectTo) {
    router.replace(redirectTo);
  }

  if (required && !data) {
    throw new Error('`required` option was set, but session was `null`');
  }

  return data;
};

export const SessionProvider = ({ children }) => {
  const [session, setSession] = useState<Session | null>(null);

  useEffect(() => {
    useSession({ required: true, redirectTo: '/login' }).then(setSession);
  }, []);

  return (
    <SessionContext.Provider value={session}>
      {children}
    </SessionContext.Provider>
  );
};

export const useSessionContext = () => useContext(SessionContext);

export const SessionContext = createContext<Session | null>(null);

=======


export const useSession = ({ required = false, redirectTo = '/login', queryConfig = {} }: UseSessionProps = {}) => {
  const router = useRouter();

  const { data: session, isFetching, error } = useQuery<Session | null, unknown, unknown>(
    'session',
    fetchSession,
    queryConfig
  );

  if (isFetching) return null;

  if (error) {
    if (required) {
      if (redirectTo) {
        router.push(redirectTo);
      }
    }
    return null;
  }

  if (!session && required) {
    if (redirectTo) {
      router.push(redirectTo);
    }
    return null;
  }

  return session;
};

=======


export const useSession = ({ required = false, redirectTo, queryConfig }: UseSessionProps = {}) => {
  const router = useRouter();
  const client = useQueryClient();

  const { data: session, error, isLoading } = useQuery(
    ['session', queryConfig],
    fetchSession,
    {
      enabled: !!router,
    },
  );

  const isLoggedIn = !!session;

  if (required && !isLoggedIn) {
    if (redirectTo) {
      router.push(redirectTo);
    } else {
      throw new Error('You must be logged in to access this page');
    }
  }

  return {
    data: isLoading ? null : session,
    error,
    isLoading,
    isLoggedIn,
    client,
  };
};

export const SessionProvider = ({ children, queryConfig }: { children: React.ReactNode; queryConfig?: QueryConfig<Session | null, unknown, unknown> }) => {
  const session = useSession({ queryConfig });
  return (
    <>
      <SessionContext.Provider value={session}>
        {children}
      </SessionContext.Provider>
    </>
  );
};

export const useSessionContext = () => {
  const context = React.useContext(SessionContext);
  if (!context) {
    throw new Error('useSessionContext must be used within a SessionProvider');
  }
  return context;
};

export const SessionContext = React.createContext<{
  data: Session | null;
  error: unknown;
  isLoading: boolean;
  isLoggedIn: boolean;
  client: QueryClient;
}>({
  data: null,
  error: null,
  isLoading: false,
  isLoggedIn: false,
  client: null,
});

=======


export const useSession = ({ required, redirectTo, queryConfig }: UseSessionProps = {}) => {
  const router = useRouter();
  const queryClient = useQuery(
    ['session', queryConfig],
    async () => {
      const session = await fetchSession();
      if (required && !session) {
        router.push(redirectTo || '/login');
      }
      return session;
    },
    { suspense: true }
  );

  return queryClient.data;
};
